// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/x1unix/docusearch/internal/services/store (interfaces: DocumentStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDocumentStore is a mock of DocumentStore interface.
type MockDocumentStore struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentStoreMockRecorder
}

// MockDocumentStoreMockRecorder is the mock recorder for MockDocumentStore.
type MockDocumentStoreMockRecorder struct {
	mock *MockDocumentStore
}

// NewMockDocumentStore creates a new mock instance.
func NewMockDocumentStore(ctrl *gomock.Controller) *MockDocumentStore {
	mock := &MockDocumentStore{ctrl: ctrl}
	mock.recorder = &MockDocumentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentStore) EXPECT() *MockDocumentStoreMockRecorder {
	return m.recorder
}

// AddDocument mocks base method.
func (m *MockDocumentStore) AddDocument(arg0 context.Context, arg1 string, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocument", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDocument indicates an expected call of AddDocument.
func (mr *MockDocumentStoreMockRecorder) AddDocument(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocument", reflect.TypeOf((*MockDocumentStore)(nil).AddDocument), arg0, arg1, arg2)
}

// GetDocument mocks base method.
func (m *MockDocumentStore) GetDocument(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument.
func (mr *MockDocumentStoreMockRecorder) GetDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockDocumentStore)(nil).GetDocument), arg0)
}

// RemoveDocument mocks base method.
func (m *MockDocumentStore) RemoveDocument(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDocument", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDocument indicates an expected call of RemoveDocument.
func (mr *MockDocumentStoreMockRecorder) RemoveDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDocument", reflect.TypeOf((*MockDocumentStore)(nil).RemoveDocument), arg0, arg1)
}
